Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC1

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IGA


  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC


  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1


  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2


  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: Private Subnet 1


  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc




  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PrivateSubnet1



  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway


  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1


  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Route Table


  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1


  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Web-sg"
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 37.214.61.132/32
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 37.214.61.132/32
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 37.214.61.132/32
        - IpProtocol: tcp
          FromPort: 11211
          ToPort: 11211 
          CidrIp: 37.214.61.132/32
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379 
          CidrIp: 37.214.61.132/32
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432 
          CidrIp: 37.214.61.132/32 
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC


  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-048ff3da02834afdc 
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref WebAppSecurityGroup
      SubnetId: !Ref PublicSubnet1
      KeyName: RSA_KEY
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          #echo "<h1>Hello from Region us-east-2b</h1>" > /var/www/html/index.html


  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-048ff3da02834afdc
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref WebAppSecurityGroup
      SubnetId: !Ref PublicSubnet2
      KeyName: RSA_KEY
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          #echo "<h1>Hello from Region us-east-2b</h1>" > /var/www/html/index.html


  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      CrossZone: true
      Instances:
      - !Ref EC2Instance1
      - !Ref EC2Instance2
      Listeners:
      - InstancePort: '80'
        InstanceProtocol: HTTP
        LoadBalancerPort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '5'
        Timeout: '2'
      SecurityGroups:
        - !Ref WebAppSecurityGroup
      Scheme: 'internet-facing'


  PrivateSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Database
      SubnetIds:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2


  RDS:      
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      BackupRetentionPeriod: 0 
      CopyTagsToSnapshot: true 
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: usermanagerdb
      DBName: 'MyDB'
      DBSubnetGroupName: !Ref PrivateSubnetGroup
      Engine: 'postgres'
      EngineVersion: '14.1'
      LicenseModel: 'postgresql-license'
      MasterUsername: 'vladimir'
      MasterUserPassword: 'vladimir'
      MaxAllocatedStorage: 1000
      MultiAZ: true
      PubliclyAccessible: false
      StorageType: gp2
      VPCSecurityGroups:
        - Ref: WebAppSecurityGroup


  ElastiSubnetGroup:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      Description: Cache Subnet Group
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2 


  ElastiCache1:
    Type: AWS::ElastiCache::CacheCluster
    Properties: 
      CacheSubnetGroupName: !Ref ElastiSubnetGroup
      CacheNodeType: cache.t2.micro
      Engine: redis
      EngineVersion: "6.2"
      NumCacheNodes: 1
      Port: 6379
      VpcSecurityGroupIds: 
        - Ref: WebAppSecurityGroup


  ElastiCache2:
    Type: AWS::ElastiCache::CacheCluster
    Properties: 
      AZMode: "cross-az"
      CacheSubnetGroupName: !Ref ElastiSubnetGroup
      CacheNodeType: cache.t2.micro
      Engine: memcached
      EngineVersion: "1.6.6"
      NumCacheNodes: 2
      Port: 11211
      VpcSecurityGroupIds: 
        - Ref: WebAppSecurityGroup   
        
             
