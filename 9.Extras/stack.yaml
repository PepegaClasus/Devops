---
Parameters:
  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.2xlarge
    - t2.large
    - t2.medium
    - t2.micro
    - t2.nano
    - t2.small
    - t2.xlarge
    - t3.2xlarge
  SSHKey:
    Type: AWS::EC2::KeyPair::KeyName
    Default: Linux-key
  PublicIp:
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
  VPCID:
    Type: AWS::EC2::VPC::Id
    Default: vpc-048c702a46d313474
  InstanceName:
    Type: String
    Default: website

Resources:

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IGA


  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPCID


  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCID
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.8.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1


  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCID
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.9.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2


  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: Public Route Table


  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway


  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1


  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ALB-SecurityGroup"
      GroupDescription: "ALB Security group"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VPCID


  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Instance-SecurityGroup"
      GroupDescription: "Instance Security group"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VPCID

  Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref SSHKey
      ImageId: ami-000a50528e2b6c53c
      InstanceType: !Ref InstanceTypeParameter
      SecurityGroupIds:
      - !Ref InstanceSecurityGroup
      SubnetId: !Ref PublicSubnet1
      Tags:
         Key: Name
         Value: !Ref InstanceName


  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: InternetGateway
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      Name: ALB
      SecurityGroups:
      - Ref: ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: 'true'
      HealthCheckPath: "/"
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref Instance
      Port: 80
      TargetType: instance
      VpcId: !Ref VPCID

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
